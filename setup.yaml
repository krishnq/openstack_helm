apiVersion: v1
items:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      openstackhelm.openstack.org/release_uuid: ""
    creationTimestamp: "2020-04-23T01:08:58Z"
    generation: 1
    labels:
      application: glance
      component: api
      release_group: glance
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:openstackhelm.openstack.org/release_uuid: {}
          f:labels:
            .: {}
            f:application: {}
            f:component: {}
            f:release_group: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:application: {}
              f:component: {}
              f:release_group: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:configmap-bin-hash: {}
                f:configmap-etc-hash: {}
                f:openstackhelm.openstack.org/release_uuid: {}
              f:labels:
                .: {}
                f:application: {}
                f:component: {}
                f:release_group: {}
            f:spec:
              f:affinity:
                .: {}
                f:podAntiAffinity:
                  .: {}
                  f:preferredDuringSchedulingIgnoredDuringExecution: {}
              f:containers:
                k:{"name":"glance-api"}:
                  .: {}
                  f:command: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:lifecycle:
                    .: {}
                    f:preStop:
                      .: {}
                      f:exec:
                        .: {}
                        f:command: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:tcpSocket:
                      .: {}
                      f:port: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":9292,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:tcpSocket:
                      .: {}
                      f:port: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/glance"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/etc/glance/api_audit_map.conf"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/glance/glance-api-paste.ini"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/glance/glance-api.conf"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/glance/logging.conf"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/glance/policy.json"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/glance/swift-store.conf"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/tmp/glance-api.sh"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/var/lib/glance/images"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:initContainers:
                .: {}
                k:{"name":"glance-perms"}:
                  .: {}
                  f:command: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/var/lib/glance/images"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                k:{"name":"init"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"DEPENDENCY_CONTAINER"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_CUSTOM_RESOURCE"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_DAEMONSET"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_JOBS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"DEPENDENCY_POD_JSON"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_SERVICE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"INTERFACE_NAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"PATH"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POD_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:nodeSelector:
                .: {}
                f:openstack-control-plane: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:runAsUser: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"etcglance"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
                k:{"name":"glance-bin"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"glance-etc"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:secretName: {}
                k:{"name":"glance-images"}:
                  .: {}
                  f:name: {}
                  f:persistentVolumeClaim:
                    .: {}
                    f:claimName: {}
                k:{"name":"pod-tmp"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
      manager: Go-http-client
      operation: Update
      time: "2020-04-23T01:08:58Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-04-23T01:10:33Z"
    name: glance-api
    namespace: openstack
    resourceVersion: "270345"
    selfLink: /apis/apps/v1/namespaces/openstack/deployments/glance-api
    uid: 1ae64702-d99a-4ef3-a654-5c8b25c3c66d
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 3
    selector:
      matchLabels:
        application: glance
        component: api
        release_group: glance
    strategy:
      rollingUpdate:
        maxSurge: 3
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        annotations:
          configmap-bin-hash: 1723abbb94d369749f1d0b444d4a5cc1e27859c610add9f0caa15cf2a752f310
          configmap-etc-hash: 4c4fa2d29920dfc6804a63091d6f28c9e4a2fa6acda3be83cbbc00f57f3627e7
          openstackhelm.openstack.org/release_uuid: ""
        creationTimestamp: null
        labels:
          application: glance
          component: api
          release_group: glance
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: release_group
                    operator: In
                    values:
                    - glance
                  - key: application
                    operator: In
                    values:
                    - glance
                  - key: component
                    operator: In
                    values:
                    - api
                topologyKey: kubernetes.io/hostname
              weight: 10
        containers:
        - command:
          - /tmp/glance-api.sh
          - start
          image: docker.io/openstackhelm/glance:ocata-ubuntu_xenial
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /tmp/glance-api.sh
                - stop
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 9292
            timeoutSeconds: 1
          name: glance-api
          ports:
          - containerPort: 9292
            name: g-api
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 9292
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: pod-tmp
          - mountPath: /etc/glance
            name: etcglance
          - mountPath: /tmp/glance-api.sh
            name: glance-bin
            readOnly: true
            subPath: glance-api.sh
          - mountPath: /etc/glance/glance-api.conf
            name: glance-etc
            readOnly: true
            subPath: glance-api.conf
          - mountPath: /etc/glance/logging.conf
            name: glance-etc
            readOnly: true
            subPath: logging.conf
          - mountPath: /etc/glance/glance-api-paste.ini
            name: glance-etc
            readOnly: true
            subPath: glance-api-paste.ini
          - mountPath: /etc/glance/policy.json
            name: glance-etc
            readOnly: true
            subPath: policy.json
          - mountPath: /etc/glance/api_audit_map.conf
            name: glance-etc
            readOnly: true
            subPath: api_audit_map.conf
          - mountPath: /etc/glance/swift-store.conf
            name: glance-etc
            readOnly: true
            subPath: swift-store.conf
          - mountPath: /var/lib/glance/images
            name: glance-images
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - kubernetes-entrypoint
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: INTERFACE_NAME
            value: eth0
          - name: PATH
            value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
          - name: DEPENDENCY_SERVICE
            value: openstack:mariadb,openstack:keystone-api,openstack:rabbitmq
          - name: DEPENDENCY_JOBS
            value: glance-storage-init,glance-db-sync,glance-rabbit-init,glance-ks-user,glance-ks-endpoints
          - name: DEPENDENCY_DAEMONSET
          - name: DEPENDENCY_CONTAINER
          - name: DEPENDENCY_POD_JSON
          - name: DEPENDENCY_CUSTOM_RESOURCE
          image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
          imagePullPolicy: IfNotPresent
          name: init
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - chown
          - -R
          - 'glance:'
          - /var/lib/glance/images
          image: docker.io/openstackhelm/glance:ocata-ubuntu_xenial
          imagePullPolicy: IfNotPresent
          name: glance-perms
          resources: {}
          securityContext:
            readOnlyRootFilesystem: true
            runAsUser: 0
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: pod-tmp
          - mountPath: /var/lib/glance/images
            name: glance-images
        nodeSelector:
          openstack-control-plane: enabled
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsUser: 42424
        serviceAccount: glance-api
        serviceAccountName: glance-api
        terminationGracePeriodSeconds: 600
        volumes:
        - emptyDir: {}
          name: pod-tmp
        - emptyDir: {}
          name: etcglance
        - configMap:
            defaultMode: 365
            name: glance-bin
          name: glance-bin
        - name: glance-etc
          secret:
            defaultMode: 292
            secretName: glance-etc
        - name: glance-images
          persistentVolumeClaim:
            claimName: glance-images
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2020-04-23T01:08:58Z"
      lastUpdateTime: "2020-04-23T01:08:58Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2020-04-23T01:08:58Z"
      lastUpdateTime: "2020-04-23T01:10:33Z"
      message: ReplicaSet "glance-api-c54895864" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      openstackhelm.openstack.org/release_uuid: ""
    creationTimestamp: "2020-04-23T03:24:54Z"
    generation: 1
    labels:
      application: horizon
      component: server
      release_group: horizon
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:openstackhelm.openstack.org/release_uuid: {}
          f:labels:
            .: {}
            f:application: {}
            f:component: {}
            f:release_group: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:application: {}
              f:component: {}
              f:release_group: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:configmap-bin-hash: {}
                f:configmap-etc-hash: {}
                f:openstackhelm.openstack.org/release_uuid: {}
              f:labels:
                .: {}
                f:application: {}
                f:component: {}
                f:release_group: {}
            f:spec:
              f:affinity:
                .: {}
                f:podAntiAffinity:
                  .: {}
                  f:preferredDuringSchedulingIgnoredDuringExecution: {}
              f:containers:
                k:{"name":"horizon"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"MY_POD_IP"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:lifecycle:
                    .: {}
                    f:preStop:
                      .: {}
                      f:exec:
                        .: {}
                        f:command: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":80,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/apache2/conf-available/security.conf"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/apache2/sites-available/000-default.conf"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/openstack-dashboard/ceilometer_policy.json"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/openstack-dashboard/cinder_policy.json"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/openstack-dashboard/glance_policy.json"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/openstack-dashboard/heat_policy.json"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/openstack-dashboard/keystone_policy.json"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/openstack-dashboard/local_settings"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/openstack-dashboard/neutron_policy.json"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/openstack-dashboard/nova_policy.json"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/tmp/horizon.sh"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/tmp/manage.py"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/var/www/cgi-bin/horizon/django.wsgi"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/var/www/html/"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:initContainers:
                .: {}
                k:{"name":"init"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"DEPENDENCY_CONTAINER"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_CUSTOM_RESOURCE"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_DAEMONSET"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_JOBS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"DEPENDENCY_POD_JSON"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_SERVICE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"INTERFACE_NAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"PATH"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POD_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:nodeSelector:
                .: {}
                f:openstack-control-plane: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:runAsUser: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"horizon-bin"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"horizon-etc"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:secretName: {}
                k:{"name":"pod-tmp"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
                k:{"name":"static-horizon"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
                k:{"name":"wsgi-horizon"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
      manager: Go-http-client
      operation: Update
      time: "2020-04-23T03:24:54Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-04-23T04:13:39Z"
    name: horizon
    namespace: openstack
    resourceVersion: "320456"
    selfLink: /apis/apps/v1/namespaces/openstack/deployments/horizon
    uid: b7f65a66-2d55-440f-a58b-c3630dbdea9c
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 3
    selector:
      matchLabels:
        application: horizon
        component: server
        release_group: horizon
    strategy:
      rollingUpdate:
        maxSurge: 3
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        annotations:
          configmap-bin-hash: 1e2bd5bbc95e7f923220a93b3dd4177798a76829788b3154b7beb67f3acaf4bf
          configmap-etc-hash: 09d7a25dcd9745560aeb3342d036947b2678ea806e8ee55ffe61172282074ab7
          openstackhelm.openstack.org/release_uuid: ""
        creationTimestamp: null
        labels:
          application: horizon
          component: server
          release_group: horizon
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: release_group
                    operator: In
                    values:
                    - horizon
                  - key: application
                    operator: In
                    values:
                    - horizon
                  - key: component
                    operator: In
                    values:
                    - server
                topologyKey: kubernetes.io/hostname
              weight: 10
        containers:
        - command:
          - /tmp/horizon.sh
          - start
          env:
          - name: MY_POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          image: docker.io/openstackhelm/horizon:ocata-ubuntu_xenial
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /tmp/horizon.sh
                - stop
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 80
              scheme: HTTP
            initialDelaySeconds: 180
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 5
          name: horizon
          ports:
          - containerPort: 80
            name: web
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 80
              scheme: HTTP
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            runAsUser: 0
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: pod-tmp
          - mountPath: /var/www/html/
            name: static-horizon
          - mountPath: /tmp/horizon.sh
            name: horizon-bin
            readOnly: true
            subPath: horizon.sh
          - mountPath: /tmp/manage.py
            name: horizon-bin
            readOnly: true
            subPath: manage.py
          - mountPath: /etc/apache2/sites-available/000-default.conf
            name: horizon-etc
            readOnly: true
            subPath: horizon.conf
          - mountPath: /etc/apache2/conf-available/security.conf
            name: horizon-etc
            readOnly: true
            subPath: security.conf
          - mountPath: /var/www/cgi-bin/horizon/django.wsgi
            name: horizon-bin
            readOnly: true
            subPath: django.wsgi
          - mountPath: /etc/openstack-dashboard/local_settings
            name: horizon-etc
            readOnly: true
            subPath: local_settings
          - mountPath: /etc/openstack-dashboard/ceilometer_policy.json
            name: horizon-etc
            readOnly: true
            subPath: ceilometer_policy.json
          - mountPath: /etc/openstack-dashboard/cinder_policy.json
            name: horizon-etc
            readOnly: true
            subPath: cinder_policy.json
          - mountPath: /etc/openstack-dashboard/glance_policy.json
            name: horizon-etc
            readOnly: true
            subPath: glance_policy.json
          - mountPath: /etc/openstack-dashboard/heat_policy.json
            name: horizon-etc
            readOnly: true
            subPath: heat_policy.json
          - mountPath: /etc/openstack-dashboard/keystone_policy.json
            name: horizon-etc
            readOnly: true
            subPath: keystone_policy.json
          - mountPath: /etc/openstack-dashboard/neutron_policy.json
            name: horizon-etc
            readOnly: true
            subPath: neutron_policy.json
          - mountPath: /etc/openstack-dashboard/nova_policy.json
            name: horizon-etc
            readOnly: true
            subPath: nova_policy.json
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - kubernetes-entrypoint
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: INTERFACE_NAME
            value: eth0
          - name: PATH
            value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
          - name: DEPENDENCY_SERVICE
            value: openstack:memcached,openstack:mariadb,openstack:keystone-api
          - name: DEPENDENCY_JOBS
            value: horizon-db-sync
          - name: DEPENDENCY_DAEMONSET
          - name: DEPENDENCY_CONTAINER
          - name: DEPENDENCY_POD_JSON
          - name: DEPENDENCY_CUSTOM_RESOURCE
          image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
          imagePullPolicy: IfNotPresent
          name: init
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        nodeSelector:
          openstack-control-plane: enabled
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsUser: 42424
        serviceAccount: horizon
        serviceAccountName: horizon
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: pod-tmp
        - emptyDir: {}
          name: wsgi-horizon
        - emptyDir: {}
          name: static-horizon
        - configMap:
            defaultMode: 365
            name: horizon-bin
          name: horizon-bin
        - name: horizon-etc
          secret:
            defaultMode: 292
            secretName: horizon-etc
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2020-04-23T03:24:54Z"
      lastUpdateTime: "2020-04-23T03:24:54Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2020-04-23T03:24:54Z"
      lastUpdateTime: "2020-04-23T03:28:07Z"
      message: ReplicaSet "horizon-bb6cbf6cc" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      openstackhelm.openstack.org/release_uuid: ""
    creationTimestamp: "2020-04-22T23:08:45Z"
    generation: 1
    labels:
      app: ingress-api
      application: ingress
      component: server
      release_group: ingress-openstack
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:openstackhelm.openstack.org/release_uuid: {}
          f:labels:
            .: {}
            f:app: {}
            f:application: {}
            f:component: {}
            f:release_group: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:application: {}
              f:component: {}
              f:release_group: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:configmap-bin-hash: {}
                f:configmap-etc-hash: {}
                f:openstackhelm.openstack.org/release_uuid: {}
              f:labels:
                .: {}
                f:app: {}
                f:application: {}
                f:component: {}
                f:release_group: {}
            f:spec:
              f:affinity:
                .: {}
                f:podAntiAffinity:
                  .: {}
                  f:preferredDuringSchedulingIgnoredDuringExecution: {}
              f:containers:
                k:{"name":"ingress"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"DEFAULT_SERVER_PORT"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"ERROR_PAGE_SERVICE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"INGRESS_CLASS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POD_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"POD_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"PORT_HEALTHZ"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"PORT_HTTP"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"PORT_HTTPS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"PORT_PROFILER"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"PORT_STATUS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"PORT_STREAM"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"RELEASE_NAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:lifecycle:
                    .: {}
                    f:preStop:
                      .: {}
                      f:exec:
                        .: {}
                        f:command: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":80,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                    k:{"containerPort":443,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                    k:{"containerPort":8181,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                    k:{"containerPort":10246,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                    k:{"containerPort":10254,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/tmp/ingress-controller.sh"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
              f:dnsPolicy: {}
              f:initContainers:
                .: {}
                k:{"name":"init"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"DEPENDENCY_CONTAINER"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_CUSTOM_RESOURCE"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_DAEMONSET"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_POD_JSON"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_SERVICE"}:
                      .: {}
                      f:name: {}
                    k:{"name":"INTERFACE_NAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"PATH"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POD_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:nodeSelector:
                .: {}
                f:openstack-control-plane: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:runAsUser: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:shareProcessNamespace: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"ingress-bin"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"pod-tmp"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
      manager: Go-http-client
      operation: Update
      time: "2020-04-22T23:08:45Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-04-23T04:06:56Z"
    name: ingress
    namespace: openstack
    resourceVersion: "318190"
    selfLink: /apis/apps/v1/namespaces/openstack/deployments/ingress
    uid: 70de6612-8aef-45d3-bf62-002d08a11939
  spec:
    progressDeadlineSeconds: 600
    replicas: 2
    revisionHistoryLimit: 3
    selector:
      matchLabels:
        app: ingress-api
        application: ingress
        component: server
        release_group: ingress-openstack
    strategy:
      rollingUpdate:
        maxSurge: 3
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        annotations:
          configmap-bin-hash: 71d4cbb3936fd7f0f357da33219af28394eb7bb18e6b7a5002800df27732de8f
          configmap-etc-hash: 369dbe44e608890f4d77cbb9c7dd70fe6688196a734ebe3ade647f049c87714b
          openstackhelm.openstack.org/release_uuid: ""
        creationTimestamp: null
        labels:
          app: ingress-api
          application: ingress
          component: server
          release_group: ingress-openstack
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: release_group
                    operator: In
                    values:
                    - ingress-openstack
                  - key: application
                    operator: In
                    values:
                    - ingress
                  - key: component
                    operator: In
                    values:
                    - server
                topologyKey: kubernetes.io/hostname
              weight: 10
        containers:
        - command:
          - /tmp/ingress-controller.sh
          - start
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: PORT_HTTP
            value: "80"
          - name: PORT_HTTPS
            value: "443"
          - name: PORT_STATUS
            value: "10246"
          - name: PORT_STREAM
            value: "10247"
          - name: PORT_PROFILER
            value: "10245"
          - name: PORT_HEALTHZ
            value: "10254"
          - name: DEFAULT_SERVER_PORT
            value: "8181"
          - name: RELEASE_NAME
            value: ingress-openstack
          - name: ERROR_PAGE_SERVICE
            value: ingress-error-pages
          - name: INGRESS_CLASS
            value: nginx
          image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.23.0
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /tmp/ingress-controller.sh
                - stop
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: ingress
          ports:
          - containerPort: 80
            protocol: TCP
          - containerPort: 443
            protocol: TCP
          - containerPort: 10246
            protocol: TCP
          - containerPort: 10254
            protocol: TCP
          - containerPort: 8181
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            readOnlyRootFilesystem: false
            runAsUser: 0
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: pod-tmp
          - mountPath: /tmp/ingress-controller.sh
            name: ingress-bin
            readOnly: true
            subPath: ingress-controller.sh
        dnsPolicy: ClusterFirstWithHostNet
        initContainers:
        - command:
          - kubernetes-entrypoint
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: INTERFACE_NAME
            value: eth0
          - name: PATH
            value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
          - name: DEPENDENCY_SERVICE
          - name: DEPENDENCY_DAEMONSET
          - name: DEPENDENCY_CONTAINER
          - name: DEPENDENCY_POD_JSON
          - name: DEPENDENCY_CUSTOM_RESOURCE
          image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
          imagePullPolicy: IfNotPresent
          name: init
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        nodeSelector:
          openstack-control-plane: enabled
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsUser: 65534
        serviceAccount: ingress-openstack-ingress
        serviceAccountName: ingress-openstack-ingress
        shareProcessNamespace: true
        terminationGracePeriodSeconds: 60
        volumes:
        - emptyDir: {}
          name: pod-tmp
        - configMap:
            defaultMode: 365
            name: ingress-bin
          name: ingress-bin
  status:
    availableReplicas: 2
    conditions:
    - lastTransitionTime: "2020-04-22T23:08:53Z"
      lastUpdateTime: "2020-04-22T23:08:53Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2020-04-22T23:08:45Z"
      lastUpdateTime: "2020-04-22T23:09:00Z"
      message: ReplicaSet "ingress-6c5f877cd" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 2
    replicas: 2
    updatedReplicas: 2
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      openstackhelm.openstack.org/release_uuid: ""
    creationTimestamp: "2020-04-22T23:08:45Z"
    generation: 1
    labels:
      application: ingress
      component: error-pages
      release_group: ingress-openstack
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:openstackhelm.openstack.org/release_uuid: {}
          f:labels:
            .: {}
            f:application: {}
            f:component: {}
            f:release_group: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:application: {}
              f:component: {}
              f:release_group: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:configmap-bin-hash: {}
                f:configmap-etc-hash: {}
                f:openstackhelm.openstack.org/release_uuid: {}
              f:labels:
                .: {}
                f:application: {}
                f:component: {}
                f:release_group: {}
            f:spec:
              f:affinity:
                .: {}
                f:podAntiAffinity:
                  .: {}
                  f:preferredDuringSchedulingIgnoredDuringExecution: {}
              f:containers:
                k:{"name":"ingress-error-pages"}:
                  .: {}
                  f:command: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:lifecycle:
                    .: {}
                    f:preStop:
                      .: {}
                      f:exec:
                        .: {}
                        f:command: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8080,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/tmp/ingress-error-pages.sh"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
              f:dnsPolicy: {}
              f:initContainers:
                .: {}
                k:{"name":"init"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"DEPENDENCY_CONTAINER"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_CUSTOM_RESOURCE"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_DAEMONSET"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_POD_JSON"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_SERVICE"}:
                      .: {}
                      f:name: {}
                    k:{"name":"INTERFACE_NAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"PATH"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POD_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:nodeSelector:
                .: {}
                f:openstack-control-plane: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:runAsUser: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:shareProcessNamespace: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"ingress-bin"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"pod-tmp"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
      manager: Go-http-client
      operation: Update
      time: "2020-04-22T23:08:45Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-04-23T04:06:42Z"
    name: ingress-error-pages
    namespace: openstack
    resourceVersion: "318038"
    selfLink: /apis/apps/v1/namespaces/openstack/deployments/ingress-error-pages
    uid: ce984c35-7dee-4384-ac7d-d82f9145966e
  spec:
    progressDeadlineSeconds: 600
    replicas: 2
    revisionHistoryLimit: 3
    selector:
      matchLabels:
        application: ingress
        component: error-pages
        release_group: ingress-openstack
    strategy:
      rollingUpdate:
        maxSurge: 3
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        annotations:
          configmap-bin-hash: 71d4cbb3936fd7f0f357da33219af28394eb7bb18e6b7a5002800df27732de8f
          configmap-etc-hash: 369dbe44e608890f4d77cbb9c7dd70fe6688196a734ebe3ade647f049c87714b
          openstackhelm.openstack.org/release_uuid: ""
        creationTimestamp: null
        labels:
          application: ingress
          component: error-pages
          release_group: ingress-openstack
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: release_group
                    operator: In
                    values:
                    - ingress-openstack
                  - key: application
                    operator: In
                    values:
                    - ingress
                  - key: component
                    operator: In
                    values:
                    - error-pages
                topologyKey: kubernetes.io/hostname
              weight: 10
        containers:
        - command:
          - /tmp/ingress-error-pages.sh
          - start
          image: gcr.io/google_containers/defaultbackend:1.0
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /tmp/ingress-error-pages.sh
                - stop
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: ingress-error-pages
          ports:
          - containerPort: 8080
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: pod-tmp
          - mountPath: /tmp/ingress-error-pages.sh
            name: ingress-bin
            readOnly: true
            subPath: ingress-error-pages.sh
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - kubernetes-entrypoint
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: INTERFACE_NAME
            value: eth0
          - name: PATH
            value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
          - name: DEPENDENCY_SERVICE
          - name: DEPENDENCY_DAEMONSET
          - name: DEPENDENCY_CONTAINER
          - name: DEPENDENCY_POD_JSON
          - name: DEPENDENCY_CUSTOM_RESOURCE
          image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
          imagePullPolicy: IfNotPresent
          name: init
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        nodeSelector:
          openstack-control-plane: enabled
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsUser: 65534
        serviceAccount: ingress-error-pages
        serviceAccountName: ingress-error-pages
        shareProcessNamespace: true
        terminationGracePeriodSeconds: 60
        volumes:
        - emptyDir: {}
          name: pod-tmp
        - configMap:
            defaultMode: 365
            name: ingress-bin
          name: ingress-bin
  status:
    availableReplicas: 2
    conditions:
    - lastTransitionTime: "2020-04-22T23:08:49Z"
      lastUpdateTime: "2020-04-22T23:08:49Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2020-04-22T23:08:45Z"
      lastUpdateTime: "2020-04-22T23:08:49Z"
      message: ReplicaSet "ingress-error-pages-67ddcbc85c" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 2
    replicas: 2
    updatedReplicas: 2
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      openstackhelm.openstack.org/release_uuid: ""
    creationTimestamp: "2020-04-22T17:45:15Z"
    generation: 1
    labels:
      application: keystone
      component: api
      release_group: keystone
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:openstackhelm.openstack.org/release_uuid: {}
          f:labels:
            .: {}
            f:application: {}
            f:component: {}
            f:release_group: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:application: {}
              f:component: {}
              f:release_group: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:configmap-bin-hash: {}
                f:configmap-etc-hash: {}
                f:openstackhelm.openstack.org/release_uuid: {}
              f:labels:
                .: {}
                f:application: {}
                f:component: {}
                f:release_group: {}
            f:spec:
              f:affinity:
                .: {}
                f:podAntiAffinity:
                  .: {}
                  f:preferredDuringSchedulingIgnoredDuringExecution: {}
              f:containers:
                k:{"name":"keystone-api"}:
                  .: {}
                  f:command: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:lifecycle:
                    .: {}
                    f:preStop:
                      .: {}
                      f:exec:
                        .: {}
                        f:command: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":5000,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/apache2/conf-enabled/security.conf"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/apache2/conf-enabled/wsgi-keystone.conf"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/apache2/mods-available/mpm_event.conf"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/apache2/ports.conf"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/keystone"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/etc/keystone/credential-keys/"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/etc/keystone/fernet-keys/"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/etc/keystone/keystone-paste.ini"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/keystone/keystone.conf"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/keystone/logging.conf"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/keystone/policy.json"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/keystone/sso_callback_template.html"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/tmp/keystone-api.sh"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/var/log/apache2"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/var/run/apache2"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/var/www/cgi-bin/keystone"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:initContainers:
                .: {}
                k:{"name":"init"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"DEPENDENCY_CONTAINER"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_CUSTOM_RESOURCE"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_DAEMONSET"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_JOBS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"DEPENDENCY_POD_JSON"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_SERVICE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"INTERFACE_NAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"PATH"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POD_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:nodeSelector:
                .: {}
                f:openstack-control-plane: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:runAsUser: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"etckeystone"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
                k:{"name":"keystone-bin"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"keystone-credential-keys"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:secretName: {}
                k:{"name":"keystone-etc"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:secretName: {}
                k:{"name":"keystone-fernet-keys"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:secretName: {}
                k:{"name":"logs-apache"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
                k:{"name":"pod-tmp"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
                k:{"name":"run-apache"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
                k:{"name":"wsgi-keystone"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
      manager: Go-http-client
      operation: Update
      time: "2020-04-22T17:45:15Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-04-23T04:07:17Z"
    name: keystone-api
    namespace: openstack
    resourceVersion: "318398"
    selfLink: /apis/apps/v1/namespaces/openstack/deployments/keystone-api
    uid: 145c771d-e2f8-49f4-ac52-39f020f8b25d
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 3
    selector:
      matchLabels:
        application: keystone
        component: api
        release_group: keystone
    strategy:
      rollingUpdate:
        maxSurge: 3
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        annotations:
          configmap-bin-hash: 3c7e86e0f2cf5ada7f6d146e293aed60ef8b21fb8571a2dd377de73f53abce8b
          configmap-etc-hash: bf6efc0f7952f575e06ff0260408b5425ef8c1ad32219940a7f26fe1da0d6348
          openstackhelm.openstack.org/release_uuid: ""
        creationTimestamp: null
        labels:
          application: keystone
          component: api
          release_group: keystone
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: release_group
                    operator: In
                    values:
                    - keystone
                  - key: application
                    operator: In
                    values:
                    - keystone
                  - key: component
                    operator: In
                    values:
                    - api
                topologyKey: kubernetes.io/hostname
              weight: 10
        containers:
        - command:
          - /tmp/keystone-api.sh
          - start
          image: docker.io/openstackhelm/keystone:ocata-ubuntu_xenial
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /tmp/keystone-api.sh
                - stop
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /v3/
              port: 5000
              scheme: HTTP
            initialDelaySeconds: 50
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 5
          name: keystone-api
          ports:
          - containerPort: 5000
            name: ks-pub
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /v3/
              port: 5000
              scheme: HTTP
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: pod-tmp
          - mountPath: /etc/keystone
            name: etckeystone
          - mountPath: /var/log/apache2
            name: logs-apache
          - mountPath: /var/run/apache2
            name: run-apache
          - mountPath: /var/www/cgi-bin/keystone
            name: wsgi-keystone
          - mountPath: /etc/keystone/keystone.conf
            name: keystone-etc
            readOnly: true
            subPath: keystone.conf
          - mountPath: /etc/apache2/ports.conf
            name: keystone-etc
            readOnly: true
            subPath: ports.conf
          - mountPath: /etc/keystone/logging.conf
            name: keystone-etc
            readOnly: true
            subPath: logging.conf
          - mountPath: /etc/keystone/keystone-paste.ini
            name: keystone-etc
            readOnly: true
            subPath: keystone-paste.ini
          - mountPath: /etc/keystone/policy.json
            name: keystone-etc
            readOnly: true
            subPath: policy.json
          - mountPath: /etc/keystone/sso_callback_template.html
            name: keystone-etc
            readOnly: true
            subPath: sso_callback_template.html
          - mountPath: /etc/apache2/conf-enabled/wsgi-keystone.conf
            name: keystone-etc
            readOnly: true
            subPath: wsgi-keystone.conf
          - mountPath: /etc/apache2/mods-available/mpm_event.conf
            name: keystone-etc
            readOnly: true
            subPath: mpm_event.conf
          - mountPath: /etc/apache2/conf-enabled/security.conf
            name: keystone-etc
            readOnly: true
            subPath: security.conf
          - mountPath: /tmp/keystone-api.sh
            name: keystone-bin
            readOnly: true
            subPath: keystone-api.sh
          - mountPath: /etc/keystone/fernet-keys/
            name: keystone-fernet-keys
          - mountPath: /etc/keystone/credential-keys/
            name: keystone-credential-keys
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - kubernetes-entrypoint
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: INTERFACE_NAME
            value: eth0
          - name: PATH
            value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
          - name: DEPENDENCY_SERVICE
            value: openstack:memcached,openstack:mariadb
          - name: DEPENDENCY_JOBS
            value: keystone-db-sync,keystone-credential-setup,keystone-fernet-setup,keystone-rabbit-init
          - name: DEPENDENCY_DAEMONSET
          - name: DEPENDENCY_CONTAINER
          - name: DEPENDENCY_POD_JSON
          - name: DEPENDENCY_CUSTOM_RESOURCE
          image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
          imagePullPolicy: IfNotPresent
          name: init
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        nodeSelector:
          openstack-control-plane: enabled
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsUser: 42424
        serviceAccount: keystone-api
        serviceAccountName: keystone-api
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: pod-tmp
        - emptyDir: {}
          name: etckeystone
        - emptyDir: {}
          name: wsgi-keystone
        - emptyDir: {}
          name: logs-apache
        - emptyDir: {}
          name: run-apache
        - name: keystone-etc
          secret:
            defaultMode: 292
            secretName: keystone-etc
        - configMap:
            defaultMode: 365
            name: keystone-bin
          name: keystone-bin
        - name: keystone-fernet-keys
          secret:
            defaultMode: 420
            secretName: keystone-fernet-keys
        - name: keystone-credential-keys
          secret:
            defaultMode: 420
            secretName: keystone-credential-keys
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2020-04-22T17:45:15Z"
      lastUpdateTime: "2020-04-22T17:45:15Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2020-04-22T18:15:53Z"
      lastUpdateTime: "2020-04-22T18:15:53Z"
      message: ReplicaSet "keystone-api-b69bbbdb5" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      openstackhelm.openstack.org/release_uuid: ""
    creationTimestamp: "2020-04-22T17:33:45Z"
    generation: 1
    labels:
      application: mariadb
      component: ingress
      release_group: mariadb
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:openstackhelm.openstack.org/release_uuid: {}
          f:labels:
            .: {}
            f:application: {}
            f:component: {}
            f:release_group: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:application: {}
              f:component: {}
              f:release_group: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:configmap-bin-hash: {}
                f:configmap-etc-hash: {}
                f:openstackhelm.openstack.org/release_uuid: {}
              f:labels:
                .: {}
                f:application: {}
                f:component: {}
                f:release_group: {}
            f:spec:
              f:affinity:
                .: {}
                f:podAntiAffinity:
                  .: {}
                  f:preferredDuringSchedulingIgnoredDuringExecution: {}
              f:containers:
                k:{"name":"ingress"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"ERROR_PAGE_SERVICE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"INGRESS_CLASS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POD_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"POD_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"RELEASE_NAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:lifecycle:
                    .: {}
                    f:preStop:
                      .: {}
                      f:exec:
                        .: {}
                        f:command: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:tcpSocket:
                      .: {}
                      f:port: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/nginx/template/nginx.tmpl"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/tmp/mariadb-ingress-controller.sh"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
              f:dnsPolicy: {}
              f:initContainers:
                .: {}
                k:{"name":"init"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"DEPENDENCY_CONTAINER"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_CUSTOM_RESOURCE"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_DAEMONSET"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_POD_JSON"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_SERVICE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"INTERFACE_NAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"PATH"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POD_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:nodeSelector:
                .: {}
                f:openstack-control-plane: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:runAsUser: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:shareProcessNamespace: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"mariadb-bin"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"mariadb-ingress-etc"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"pod-tmp"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
      manager: Go-http-client
      operation: Update
      time: "2020-04-22T17:33:45Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-04-23T04:13:57Z"
    name: mariadb-ingress
    namespace: openstack
    resourceVersion: "320605"
    selfLink: /apis/apps/v1/namespaces/openstack/deployments/mariadb-ingress
    uid: 957157ed-f5f7-476e-8b1d-279ea2e900fd
  spec:
    progressDeadlineSeconds: 600
    replicas: 2
    revisionHistoryLimit: 3
    selector:
      matchLabels:
        application: mariadb
        component: ingress
        release_group: mariadb
    strategy:
      rollingUpdate:
        maxSurge: 3
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        annotations:
          configmap-bin-hash: e1778366c8243a237bcc7e39f05314fb9f9c72b2abde78b2b792e7bc780e5cc2
          configmap-etc-hash: 8abf51ad767f0d4a68ce46407305fa599c9a83012268c413b8463ed3e87e61ae
          openstackhelm.openstack.org/release_uuid: ""
        creationTimestamp: null
        labels:
          application: mariadb
          component: ingress
          release_group: mariadb
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: release_group
                    operator: In
                    values:
                    - mariadb
                  - key: application
                    operator: In
                    values:
                    - mariadb
                  - key: component
                    operator: In
                    values:
                    - ingress
                topologyKey: kubernetes.io/hostname
              weight: 10
        containers:
        - command:
          - /tmp/mariadb-ingress-controller.sh
          - start
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: RELEASE_NAME
            value: mariadb
          - name: INGRESS_CLASS
            value: mariadb-mariadb-ingress
          - name: ERROR_PAGE_SERVICE
            value: mariadb-ingress-error-pages
          image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.9.0
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /tmp/mariadb-ingress-controller.sh
                - stop
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: ingress
          readinessProbe:
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 3306
            timeoutSeconds: 1
          resources: {}
          securityContext:
            readOnlyRootFilesystem: false
            runAsUser: 0
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: pod-tmp
          - mountPath: /tmp/mariadb-ingress-controller.sh
            name: mariadb-bin
            readOnly: true
            subPath: mariadb-ingress-controller.sh
          - mountPath: /etc/nginx/template/nginx.tmpl
            name: mariadb-ingress-etc
            readOnly: true
            subPath: nginx.tmpl
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - kubernetes-entrypoint
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: INTERFACE_NAME
            value: eth0
          - name: PATH
            value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
          - name: DEPENDENCY_SERVICE
            value: openstack:mariadb-ingress-error-pages
          - name: DEPENDENCY_DAEMONSET
          - name: DEPENDENCY_CONTAINER
          - name: DEPENDENCY_POD_JSON
          - name: DEPENDENCY_CUSTOM_RESOURCE
          image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
          imagePullPolicy: IfNotPresent
          name: init
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        nodeSelector:
          openstack-control-plane: enabled
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsUser: 65534
        serviceAccount: mariadb-ingress
        serviceAccountName: mariadb-ingress
        shareProcessNamespace: true
        terminationGracePeriodSeconds: 60
        volumes:
        - emptyDir: {}
          name: pod-tmp
        - configMap:
            defaultMode: 365
            name: mariadb-bin
          name: mariadb-bin
        - configMap:
            defaultMode: 292
            name: mariadb-ingress-etc
          name: mariadb-ingress-etc
  status:
    availableReplicas: 2
    conditions:
    - lastTransitionTime: "2020-04-22T17:33:45Z"
      lastUpdateTime: "2020-04-22T17:35:40Z"
      message: ReplicaSet "mariadb-ingress-669cc7b548" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2020-04-23T04:06:27Z"
      lastUpdateTime: "2020-04-23T04:06:27Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 2
    replicas: 2
    updatedReplicas: 2
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      openstackhelm.openstack.org/release_uuid: ""
    creationTimestamp: "2020-04-22T17:33:45Z"
    generation: 1
    labels:
      application: mariadb
      component: ingress-error-pages
      release_group: mariadb
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:openstackhelm.openstack.org/release_uuid: {}
          f:labels:
            .: {}
            f:application: {}
            f:component: {}
            f:release_group: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:application: {}
              f:component: {}
              f:release_group: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:configmap-bin-hash: {}
                f:configmap-etc-hash: {}
                f:openstackhelm.openstack.org/release_uuid: {}
              f:labels:
                .: {}
                f:application: {}
                f:component: {}
                f:release_group: {}
            f:spec:
              f:affinity:
                .: {}
                f:podAntiAffinity:
                  .: {}
                  f:preferredDuringSchedulingIgnoredDuringExecution: {}
              f:containers:
                k:{"name":"ingress-error-pages"}:
                  .: {}
                  f:command: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:lifecycle:
                    .: {}
                    f:preStop:
                      .: {}
                      f:exec:
                        .: {}
                        f:command: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8080,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/tmp/mariadb-ingress-error-pages.sh"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
              f:dnsPolicy: {}
              f:initContainers:
                .: {}
                k:{"name":"init"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"DEPENDENCY_CONTAINER"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_CUSTOM_RESOURCE"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_DAEMONSET"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_POD_JSON"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_SERVICE"}:
                      .: {}
                      f:name: {}
                    k:{"name":"INTERFACE_NAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"PATH"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POD_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:nodeSelector:
                .: {}
                f:openstack-control-plane: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:runAsUser: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:shareProcessNamespace: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"ingress-bin"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"pod-tmp"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
      manager: Go-http-client
      operation: Update
      time: "2020-04-22T17:33:45Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-04-23T04:06:27Z"
    name: mariadb-ingress-error-pages
    namespace: openstack
    resourceVersion: "317700"
    selfLink: /apis/apps/v1/namespaces/openstack/deployments/mariadb-ingress-error-pages
    uid: d02272f6-1510-4a61-a934-7b49d7260bbc
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 3
    selector:
      matchLabels:
        application: mariadb
        component: ingress-error-pages
        release_group: mariadb
    strategy:
      rollingUpdate:
        maxSurge: 3
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        annotations:
          configmap-bin-hash: e1778366c8243a237bcc7e39f05314fb9f9c72b2abde78b2b792e7bc780e5cc2
          configmap-etc-hash: 8abf51ad767f0d4a68ce46407305fa599c9a83012268c413b8463ed3e87e61ae
          openstackhelm.openstack.org/release_uuid: ""
        creationTimestamp: null
        labels:
          application: mariadb
          component: ingress-error-pages
          release_group: mariadb
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: release_group
                    operator: In
                    values:
                    - mariadb
                  - key: application
                    operator: In
                    values:
                    - mariadb
                  - key: component
                    operator: In
                    values:
                    - ingress-error-pages
                topologyKey: kubernetes.io/hostname
              weight: 10
        containers:
        - command:
          - /tmp/mariadb-ingress-error-pages.sh
          - start
          image: gcr.io/google_containers/defaultbackend:1.0
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /tmp/mariadb-ingress-error-pages.sh
                - stop
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: ingress-error-pages
          ports:
          - containerPort: 8080
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: pod-tmp
          - mountPath: /tmp/mariadb-ingress-error-pages.sh
            name: ingress-bin
            readOnly: true
            subPath: mariadb-ingress-error-pages.sh
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - kubernetes-entrypoint
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: INTERFACE_NAME
            value: eth0
          - name: PATH
            value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
          - name: DEPENDENCY_SERVICE
          - name: DEPENDENCY_DAEMONSET
          - name: DEPENDENCY_CONTAINER
          - name: DEPENDENCY_POD_JSON
          - name: DEPENDENCY_CUSTOM_RESOURCE
          image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
          imagePullPolicy: IfNotPresent
          name: init
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        nodeSelector:
          openstack-control-plane: enabled
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsUser: 65534
        serviceAccount: mariadb-ingress-error-pages
        serviceAccountName: mariadb-ingress-error-pages
        shareProcessNamespace: true
        terminationGracePeriodSeconds: 10
        volumes:
        - emptyDir: {}
          name: pod-tmp
        - configMap:
            defaultMode: 365
            name: mariadb-bin
          name: ingress-bin
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2020-04-22T17:33:45Z"
      lastUpdateTime: "2020-04-22T17:33:45Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2020-04-22T17:33:45Z"
      lastUpdateTime: "2020-04-22T17:33:49Z"
      message: ReplicaSet "mariadb-ingress-error-pages-dc6c8d578" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      openstackhelm.openstack.org/release_uuid: ""
    creationTimestamp: "2020-04-22T17:40:23Z"
    generation: 1
    labels:
      application: memcached
      component: server
      release_group: memcached
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:openstackhelm.openstack.org/release_uuid: {}
          f:labels:
            .: {}
            f:application: {}
            f:component: {}
            f:release_group: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:application: {}
              f:component: {}
              f:release_group: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:configmap-bin-hash: {}
                f:openstackhelm.openstack.org/release_uuid: {}
              f:labels:
                .: {}
                f:application: {}
                f:component: {}
                f:release_group: {}
            f:spec:
              f:affinity:
                .: {}
                f:podAntiAffinity:
                  .: {}
                  f:preferredDuringSchedulingIgnoredDuringExecution: {}
              f:containers:
                k:{"name":"memcached"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"MEMCACHED_MAX_CONNECTIONS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"MEMCACHED_MEMORY"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"MEMCACHED_PORT"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":11211,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:tcpSocket:
                      .: {}
                      f:port: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/tmp/memcached.sh"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
              f:dnsPolicy: {}
              f:initContainers:
                .: {}
                k:{"name":"init"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"DEPENDENCY_CONTAINER"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_CUSTOM_RESOURCE"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_DAEMONSET"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_POD_JSON"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_SERVICE"}:
                      .: {}
                      f:name: {}
                    k:{"name":"INTERFACE_NAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"PATH"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POD_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:nodeSelector:
                .: {}
                f:openstack-control-plane: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:runAsUser: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:shareProcessNamespace: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"memcached-bin"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"pod-tmp"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
      manager: Go-http-client
      operation: Update
      time: "2020-04-22T17:40:23Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-04-22T17:53:04Z"
    name: memcached-memcached
    namespace: openstack
    resourceVersion: "180136"
    selfLink: /apis/apps/v1/namespaces/openstack/deployments/memcached-memcached
    uid: 203e24e0-2e86-4d66-931d-24b37975aa03
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 3
    selector:
      matchLabels:
        application: memcached
        component: server
        release_group: memcached
    strategy:
      rollingUpdate:
        maxSurge: 3
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        annotations:
          configmap-bin-hash: c12a7c92214952aa6b142c014f88972b65aed55b2530ae6d671aa2bce3cf7416
          openstackhelm.openstack.org/release_uuid: ""
        creationTimestamp: null
        labels:
          application: memcached
          component: server
          release_group: memcached
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: release_group
                    operator: In
                    values:
                    - memcached
                  - key: application
                    operator: In
                    values:
                    - memcached
                  - key: component
                    operator: In
                    values:
                    - server
                topologyKey: kubernetes.io/hostname
              weight: 10
        containers:
        - command:
          - /tmp/memcached.sh
          env:
          - name: MEMCACHED_PORT
            value: "11211"
          - name: MEMCACHED_MAX_CONNECTIONS
            value: "8192"
          - name: MEMCACHED_MEMORY
            value: "1024"
          image: docker.io/memcached:1.5.5
          imagePullPolicy: IfNotPresent
          name: memcached
          ports:
          - containerPort: 11211
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 11211
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: pod-tmp
          - mountPath: /tmp/memcached.sh
            name: memcached-bin
            readOnly: true
            subPath: memcached.sh
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - kubernetes-entrypoint
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: INTERFACE_NAME
            value: eth0
          - name: PATH
            value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
          - name: DEPENDENCY_SERVICE
          - name: DEPENDENCY_DAEMONSET
          - name: DEPENDENCY_CONTAINER
          - name: DEPENDENCY_POD_JSON
          - name: DEPENDENCY_CUSTOM_RESOURCE
          image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
          imagePullPolicy: IfNotPresent
          name: init
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        nodeSelector:
          openstack-control-plane: enabled
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsUser: 65534
        serviceAccount: memcached-memcached
        serviceAccountName: memcached-memcached
        shareProcessNamespace: true
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: pod-tmp
        - configMap:
            defaultMode: 365
            name: memcached-memcached-bin
          name: memcached-bin
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2020-04-22T17:40:23Z"
      lastUpdateTime: "2020-04-22T17:40:23Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2020-04-22T17:40:23Z"
      lastUpdateTime: "2020-04-22T17:43:59Z"
      message: ReplicaSet "memcached-memcached-5c787f7fdc" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      openstackhelm.openstack.org/release_uuid: ""
    creationTimestamp: "2020-04-23T03:52:22Z"
    generation: 1
    labels:
      application: neutron
      component: server
      release_group: neutron
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:openstackhelm.openstack.org/release_uuid: {}
          f:labels:
            .: {}
            f:application: {}
            f:component: {}
            f:release_group: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:application: {}
              f:component: {}
              f:release_group: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:configmap-bin-hash: {}
                f:configmap-etc-hash: {}
                f:openstackhelm.openstack.org/release_uuid: {}
              f:labels:
                .: {}
                f:application: {}
                f:component: {}
                f:release_group: {}
            f:spec:
              f:affinity:
                .: {}
                f:podAntiAffinity:
                  .: {}
                  f:preferredDuringSchedulingIgnoredDuringExecution: {}
              f:containers:
                k:{"name":"neutron-server"}:
                  .: {}
                  f:command: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:lifecycle:
                    .: {}
                    f:preStop:
                      .: {}
                      f:exec:
                        .: {}
                        f:command: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:tcpSocket:
                      .: {}
                      f:port: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":9696,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:tcpSocket:
                      .: {}
                      f:port: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/neutron/api-paste.ini"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/neutron/api_audit_map.conf"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/neutron/logging.conf"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/neutron/neutron.conf"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/neutron/plugins/ml2/ml2_conf.ini"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/neutron/policy.json"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/tmp/neutron-server.sh"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/var/lib/neutron"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:initContainers:
                .: {}
                k:{"name":"init"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"DEPENDENCY_CONTAINER"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_CUSTOM_RESOURCE"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_DAEMONSET"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_JOBS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"DEPENDENCY_POD_JSON"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_SERVICE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"INTERFACE_NAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"PATH"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POD_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:nodeSelector:
                .: {}
                f:openstack-control-plane: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:runAsUser: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"neutron-bin"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"neutron-etc"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:secretName: {}
                k:{"name":"pod-tmp"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
                k:{"name":"pod-var-neutron"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
      manager: Go-http-client
      operation: Update
      time: "2020-04-23T03:52:22Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-04-23T03:55:55Z"
    name: neutron-server
    namespace: openstack
    resourceVersion: "314567"
    selfLink: /apis/apps/v1/namespaces/openstack/deployments/neutron-server
    uid: 79cc974e-e3f1-4340-b0c4-f09674c4c8a3
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 3
    selector:
      matchLabels:
        application: neutron
        component: server
        release_group: neutron
    strategy:
      rollingUpdate:
        maxSurge: 3
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        annotations:
          configmap-bin-hash: 64a1ec83b122011f304d854d1a3f14435b3694eeb9886852892e48b2f911e216
          configmap-etc-hash: 808ed70609e1f683b4be87083d765e2431e102c5f5cc6cee70a9cb91903a0802
          openstackhelm.openstack.org/release_uuid: ""
        creationTimestamp: null
        labels:
          application: neutron
          component: server
          release_group: neutron
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: release_group
                    operator: In
                    values:
                    - neutron
                  - key: application
                    operator: In
                    values:
                    - neutron
                  - key: component
                    operator: In
                    values:
                    - server
                topologyKey: kubernetes.io/hostname
              weight: 10
        containers:
        - command:
          - /tmp/neutron-server.sh
          - start
          image: docker.io/openstackhelm/neutron:ocata-ubuntu_xenial
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /tmp/neutron-server.sh
                - stop
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 9696
            timeoutSeconds: 1
          name: neutron-server
          ports:
          - containerPort: 9696
            name: q-api
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 9696
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: pod-tmp
          - mountPath: /var/lib/neutron
            name: pod-var-neutron
          - mountPath: /tmp/neutron-server.sh
            name: neutron-bin
            readOnly: true
            subPath: neutron-server.sh
          - mountPath: /etc/neutron/neutron.conf
            name: neutron-etc
            readOnly: true
            subPath: neutron.conf
          - mountPath: /etc/neutron/logging.conf
            name: neutron-etc
            readOnly: true
            subPath: logging.conf
          - mountPath: /etc/neutron/api_audit_map.conf
            name: neutron-etc
            readOnly: true
            subPath: api_audit_map.conf
          - mountPath: /etc/neutron/plugins/ml2/ml2_conf.ini
            name: neutron-etc
            readOnly: true
            subPath: ml2_conf.ini
          - mountPath: /etc/neutron/api-paste.ini
            name: neutron-etc
            readOnly: true
            subPath: api-paste.ini
          - mountPath: /etc/neutron/policy.json
            name: neutron-etc
            readOnly: true
            subPath: policy.json
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - kubernetes-entrypoint
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: INTERFACE_NAME
            value: eth0
          - name: PATH
            value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
          - name: DEPENDENCY_SERVICE
            value: openstack:mariadb,openstack:rabbitmq,openstack:memcached,openstack:keystone-api
          - name: DEPENDENCY_JOBS
            value: neutron-db-sync,neutron-ks-user,neutron-ks-endpoints,neutron-rabbit-init
          - name: DEPENDENCY_DAEMONSET
          - name: DEPENDENCY_CONTAINER
          - name: DEPENDENCY_POD_JSON
          - name: DEPENDENCY_CUSTOM_RESOURCE
          image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
          imagePullPolicy: IfNotPresent
          name: init
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        nodeSelector:
          openstack-control-plane: enabled
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsUser: 42424
        serviceAccount: neutron-server
        serviceAccountName: neutron-server
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: pod-tmp
        - emptyDir: {}
          name: pod-var-neutron
        - configMap:
            defaultMode: 365
            name: neutron-bin
          name: neutron-bin
        - name: neutron-etc
          secret:
            defaultMode: 292
            secretName: neutron-etc
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2020-04-23T03:52:22Z"
      lastUpdateTime: "2020-04-23T03:52:22Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2020-04-23T03:52:22Z"
      lastUpdateTime: "2020-04-23T03:55:55Z"
      message: ReplicaSet "neutron-server-794698c695" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      openstackhelm.openstack.org/release_uuid: ""
    creationTimestamp: "2020-04-22T17:16:28Z"
    generation: 1
    labels:
      application: nfs
      component: provisioner
      release_group: nfs-provisioner
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:openstackhelm.openstack.org/release_uuid: {}
          f:labels:
            .: {}
            f:application: {}
            f:component: {}
            f:release_group: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:application: {}
              f:component: {}
              f:release_group: {}
          f:strategy:
            f:type: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:configmap-bin-hash: {}
                f:openstackhelm.openstack.org/release_uuid: {}
              f:labels:
                .: {}
                f:application: {}
                f:component: {}
                f:release_group: {}
            f:spec:
              f:affinity:
                .: {}
                f:podAntiAffinity:
                  .: {}
                  f:preferredDuringSchedulingIgnoredDuringExecution: {}
              f:containers:
                k:{"name":"nfs-provisioner"}:
                  .: {}
                  f:args: {}
                  f:env:
                    .: {}
                    k:{"name":"POD_IP"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"POD_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"SERVICE_NAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":111,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":111,"protocol":"UDP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":2049,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":20048,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:capabilities:
                      .: {}
                      f:add: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/export"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:initContainers:
                .: {}
                k:{"name":"init"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"DEPENDENCY_CONTAINER"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_CUSTOM_RESOURCE"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_DAEMONSET"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_POD_JSON"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_SERVICE"}:
                      .: {}
                      f:name: {}
                    k:{"name":"INTERFACE_NAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"PATH"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POD_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:nodeSelector:
                .: {}
                f:openstack-control-plane: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"export-volume"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
                k:{"name":"pod-tmp"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
      manager: Go-http-client
      operation: Update
      time: "2020-04-22T17:16:28Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-04-22T17:52:52Z"
    name: nfs-provisioner
    namespace: openstack
    resourceVersion: "179969"
    selfLink: /apis/apps/v1/namespaces/openstack/deployments/nfs-provisioner
    uid: 7e9fa0f0-ec55-4242-b733-45d904fbe84f
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        application: nfs
        component: provisioner
        release_group: nfs-provisioner
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          configmap-bin-hash: fbd0a3ec24f5098aa6c5409f4649657b813552ebf38efe06698354468183f986
          openstackhelm.openstack.org/release_uuid: ""
        creationTimestamp: null
        labels:
          application: nfs
          component: provisioner
          release_group: nfs-provisioner
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: release_group
                    operator: In
                    values:
                    - nfs-provisioner
                  - key: application
                    operator: In
                    values:
                    - nfs
                  - key: component
                    operator: In
                    values:
                    - provisioner
                topologyKey: kubernetes.io/hostname
              weight: 10
        containers:
        - args:
          - -provisioner=nfs/nfs-provisioner
          - -grace-period=10
          env:
          - name: POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: SERVICE_NAME
            value: nfs-provisioner
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/kubernetes_incubator/nfs-provisioner:v2.2.1-k8s1.12
          imagePullPolicy: IfNotPresent
          name: nfs-provisioner
          ports:
          - containerPort: 2049
            name: nfs
            protocol: TCP
          - containerPort: 20048
            name: mountd
            protocol: TCP
          - containerPort: 111
            name: rpcbind
            protocol: TCP
          - containerPort: 111
            name: rpcbind-udp
            protocol: UDP
          resources: {}
          securityContext:
            capabilities:
              add:
              - DAC_READ_SEARCH
              - SYS_RESOURCE
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: pod-tmp
          - mountPath: /export
            name: export-volume
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - kubernetes-entrypoint
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: INTERFACE_NAME
            value: eth0
          - name: PATH
            value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
          - name: DEPENDENCY_SERVICE
          - name: DEPENDENCY_DAEMONSET
          - name: DEPENDENCY_CONTAINER
          - name: DEPENDENCY_POD_JSON
          - name: DEPENDENCY_CUSTOM_RESOURCE
          image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
          imagePullPolicy: IfNotPresent
          name: init
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        nodeSelector:
          openstack-control-plane: enabled
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: nfs-provisioner-nfs-provisioner
        serviceAccountName: nfs-provisioner-nfs-provisioner
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: pod-tmp
        - hostPath:
            path: /var/lib/openstack-helm/nfs
            type: ""
          name: export-volume
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2020-04-22T17:16:28Z"
      lastUpdateTime: "2020-04-22T17:16:30Z"
      message: ReplicaSet "nfs-provisioner-677cfcf957" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2020-04-22T17:52:52Z"
      lastUpdateTime: "2020-04-22T17:52:52Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "2"
      openstackhelm.openstack.org/release_uuid: ""
    creationTimestamp: "2020-04-23T03:49:02Z"
    generation: 2
    labels:
      application: nova
      component: metadata
      release_group: nova
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:openstackhelm.openstack.org/release_uuid: {}
          f:labels:
            .: {}
            f:application: {}
            f:component: {}
            f:release_group: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:application: {}
              f:component: {}
              f:release_group: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:configmap-bin-hash: {}
                f:configmap-etc-hash: {}
                f:openstackhelm.openstack.org/release_uuid: {}
              f:labels:
                .: {}
                f:application: {}
                f:component: {}
                f:release_group: {}
            f:spec:
              f:affinity:
                .: {}
                f:podAntiAffinity:
                  .: {}
                  f:preferredDuringSchedulingIgnoredDuringExecution: {}
              f:containers:
                k:{"name":"nova-api"}:
                  .: {}
                  f:command: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:lifecycle:
                    .: {}
                    f:preStop:
                      .: {}
                      f:exec:
                        .: {}
                        f:command: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:tcpSocket:
                      .: {}
                      f:port: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8775,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:tcpSocket:
                      .: {}
                      f:port: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/nova/api-paste.ini"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/nova/api_audit_map.conf"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/nova/logging.conf"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/nova/nova.conf"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/nova/policy.yaml"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/nova/rootwrap.conf"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/nova/rootwrap.d/api-metadata.filters"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/sudoers.d/kolla_nova_sudoers"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/sbin/iptables"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/sbin/iptables-restore"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/sbin/iptables-save"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/tmp/nova-api-metadata.sh"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/tmp/pod-shared"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
              f:dnsPolicy: {}
              f:initContainers:
                .: {}
                k:{"name":"init"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"DEPENDENCY_CONTAINER"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_CUSTOM_RESOURCE"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_DAEMONSET"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_JOBS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"DEPENDENCY_POD_JSON"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_SERVICE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"INTERFACE_NAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"PATH"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POD_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                k:{"name":"nova-api-metadata-init"}:
                  .: {}
                  f:command: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/nova/nova.conf"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/tmp/nova-api-metadata-init.sh"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/tmp/pod-shared"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:nodeSelector:
                .: {}
                f:openstack-control-plane: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:runAsUser: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"nova-bin"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"nova-etc"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:secretName: {}
                k:{"name":"pod-shared"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
                k:{"name":"pod-tmp"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
      manager: Go-http-client
      operation: Update
      time: "2020-04-23T03:52:18Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-04-23T04:06:30Z"
    name: nova-api-metadata
    namespace: openstack
    resourceVersion: "317798"
    selfLink: /apis/apps/v1/namespaces/openstack/deployments/nova-api-metadata
    uid: eccbd835-f26d-4ee0-8cab-9687c88ae2d9
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 3
    selector:
      matchLabels:
        application: nova
        component: metadata
        release_group: nova
    strategy:
      rollingUpdate:
        maxSurge: 3
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        annotations:
          configmap-bin-hash: 4facb6815012148878c37059036794ad59f3c90eb803df496507bafcd21ab523
          configmap-etc-hash: 58ff893db30b3873a05a1d110d052c8bf3c6a57b135655afc860df97db65a3b3
          openstackhelm.openstack.org/release_uuid: ""
        creationTimestamp: null
        labels:
          application: nova
          component: metadata
          release_group: nova
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: release_group
                    operator: In
                    values:
                    - nova
                  - key: application
                    operator: In
                    values:
                    - nova
                  - key: component
                    operator: In
                    values:
                    - metadata
                topologyKey: kubernetes.io/hostname
              weight: 10
        containers:
        - command:
          - /tmp/nova-api-metadata.sh
          - start
          image: docker.io/openstackhelm/nova:ocata-ubuntu_xenial
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /tmp/nova-api-metadata.sh
                - stop
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 8775
            timeoutSeconds: 1
          name: nova-api
          ports:
          - containerPort: 8775
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 8775
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: pod-tmp
          - mountPath: /tmp/nova-api-metadata.sh
            name: nova-bin
            readOnly: true
            subPath: nova-api-metadata.sh
          - mountPath: /sbin/iptables
            name: nova-bin
            readOnly: true
            subPath: fake-iptables.sh
          - mountPath: /sbin/iptables-restore
            name: nova-bin
            readOnly: true
            subPath: fake-iptables.sh
          - mountPath: /sbin/iptables-save
            name: nova-bin
            readOnly: true
            subPath: fake-iptables.sh
          - mountPath: /etc/nova/nova.conf
            name: nova-etc
            readOnly: true
            subPath: nova.conf
          - mountPath: /etc/nova/logging.conf
            name: nova-etc
            readOnly: true
            subPath: logging.conf
          - mountPath: /etc/nova/api-paste.ini
            name: nova-etc
            readOnly: true
            subPath: api-paste.ini
          - mountPath: /etc/nova/policy.yaml
            name: nova-etc
            readOnly: true
            subPath: policy.yaml
          - mountPath: /etc/nova/api_audit_map.conf
            name: nova-etc
            readOnly: true
            subPath: api_audit_map.conf
          - mountPath: /etc/sudoers.d/kolla_nova_sudoers
            name: nova-etc
            readOnly: true
            subPath: nova_sudoers
          - mountPath: /etc/nova/rootwrap.conf
            name: nova-etc
            readOnly: true
            subPath: rootwrap.conf
          - mountPath: /etc/nova/rootwrap.d/api-metadata.filters
            name: nova-etc
            readOnly: true
            subPath: api-metadata.filters
          - mountPath: /tmp/pod-shared
            name: pod-shared
            readOnly: true
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - kubernetes-entrypoint
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: INTERFACE_NAME
            value: eth0
          - name: PATH
            value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
          - name: DEPENDENCY_SERVICE
            value: openstack:rabbitmq,openstack:mariadb,openstack:keystone-api
          - name: DEPENDENCY_JOBS
            value: nova-db-sync,nova-ks-user,nova-ks-endpoints,nova-rabbit-init
          - name: DEPENDENCY_DAEMONSET
          - name: DEPENDENCY_CONTAINER
          - name: DEPENDENCY_POD_JSON
          - name: DEPENDENCY_CUSTOM_RESOURCE
          image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
          imagePullPolicy: IfNotPresent
          name: init
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - /tmp/nova-api-metadata-init.sh
          image: docker.io/openstackhelm/nova:ocata-ubuntu_xenial
          imagePullPolicy: IfNotPresent
          name: nova-api-metadata-init
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: pod-tmp
          - mountPath: /tmp/nova-api-metadata-init.sh
            name: nova-bin
            readOnly: true
            subPath: nova-api-metadata-init.sh
          - mountPath: /etc/nova/nova.conf
            name: nova-etc
            readOnly: true
            subPath: nova.conf
          - mountPath: /tmp/pod-shared
            name: pod-shared
        nodeSelector:
          openstack-control-plane: enabled
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsUser: 42424
        serviceAccount: nova-api-metadata
        serviceAccountName: nova-api-metadata
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: pod-tmp
        - configMap:
            defaultMode: 365
            name: nova-bin
          name: nova-bin
        - name: nova-etc
          secret:
            defaultMode: 292
            secretName: nova-etc
        - emptyDir: {}
          name: pod-shared
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2020-04-23T03:49:02Z"
      lastUpdateTime: "2020-04-23T03:49:02Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2020-04-23T03:49:02Z"
      lastUpdateTime: "2020-04-23T03:52:47Z"
      message: ReplicaSet "nova-api-metadata-769fd7449b" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 2
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "2"
      openstackhelm.openstack.org/release_uuid: ""
    creationTimestamp: "2020-04-23T03:49:02Z"
    generation: 2
    labels:
      application: nova
      component: os-api
      release_group: nova
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:openstackhelm.openstack.org/release_uuid: {}
          f:labels:
            .: {}
            f:application: {}
            f:component: {}
            f:release_group: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:application: {}
              f:component: {}
              f:release_group: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:configmap-bin-hash: {}
                f:configmap-etc-hash: {}
                f:openstackhelm.openstack.org/release_uuid: {}
              f:labels:
                .: {}
                f:application: {}
                f:component: {}
                f:release_group: {}
            f:spec:
              f:affinity:
                .: {}
                f:podAntiAffinity:
                  .: {}
                  f:preferredDuringSchedulingIgnoredDuringExecution: {}
              f:containers:
                k:{"name":"nova-osapi"}:
                  .: {}
                  f:command: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:lifecycle:
                    .: {}
                    f:preStop:
                      .: {}
                      f:exec:
                        .: {}
                        f:command: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:tcpSocket:
                      .: {}
                      f:port: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8774,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:tcpSocket:
                      .: {}
                      f:port: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/nova/api-paste.ini"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/nova/api_audit_map.conf"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/nova/logging.conf"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/nova/nova.conf"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/nova/policy.yaml"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/tmp/nova-api.sh"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/var/lib/nova"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:initContainers:
                .: {}
                k:{"name":"init"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"DEPENDENCY_CONTAINER"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_CUSTOM_RESOURCE"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_DAEMONSET"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_JOBS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"DEPENDENCY_POD_JSON"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_SERVICE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"INTERFACE_NAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"PATH"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POD_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:nodeSelector:
                .: {}
                f:openstack-control-plane: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:runAsUser: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"nova-bin"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"nova-etc"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:secretName: {}
                k:{"name":"pod-tmp"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
                k:{"name":"pod-var-nova"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
      manager: Go-http-client
      operation: Update
      time: "2020-04-23T03:52:18Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-04-23T04:06:15Z"
    name: nova-api-osapi
    namespace: openstack
    resourceVersion: "317553"
    selfLink: /apis/apps/v1/namespaces/openstack/deployments/nova-api-osapi
    uid: 80fd0bcb-8046-4ea3-a4af-e41a2efc6bb6
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 3
    selector:
      matchLabels:
        application: nova
        component: os-api
        release_group: nova
    strategy:
      rollingUpdate:
        maxSurge: 3
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        annotations:
          configmap-bin-hash: 4facb6815012148878c37059036794ad59f3c90eb803df496507bafcd21ab523
          configmap-etc-hash: 58ff893db30b3873a05a1d110d052c8bf3c6a57b135655afc860df97db65a3b3
          openstackhelm.openstack.org/release_uuid: ""
        creationTimestamp: null
        labels:
          application: nova
          component: os-api
          release_group: nova
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: release_group
                    operator: In
                    values:
                    - nova
                  - key: application
                    operator: In
                    values:
                    - nova
                  - key: component
                    operator: In
                    values:
                    - os-api
                topologyKey: kubernetes.io/hostname
              weight: 10
        containers:
        - command:
          - /tmp/nova-api.sh
          - start
          image: docker.io/openstackhelm/nova:ocata-ubuntu_xenial
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /tmp/nova-api.sh
                - stop
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 8774
            timeoutSeconds: 1
          name: nova-osapi
          ports:
          - containerPort: 8774
            name: n-api
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 8774
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: pod-tmp
          - mountPath: /var/lib/nova
            name: pod-var-nova
          - mountPath: /tmp/nova-api.sh
            name: nova-bin
            readOnly: true
            subPath: nova-api.sh
          - mountPath: /etc/nova/nova.conf
            name: nova-etc
            readOnly: true
            subPath: nova.conf
          - mountPath: /etc/nova/logging.conf
            name: nova-etc
            readOnly: true
            subPath: logging.conf
          - mountPath: /etc/nova/api-paste.ini
            name: nova-etc
            readOnly: true
            subPath: api-paste.ini
          - mountPath: /etc/nova/policy.yaml
            name: nova-etc
            readOnly: true
            subPath: policy.yaml
          - mountPath: /etc/nova/api_audit_map.conf
            name: nova-etc
            readOnly: true
            subPath: api_audit_map.conf
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - kubernetes-entrypoint
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: INTERFACE_NAME
            value: eth0
          - name: PATH
            value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
          - name: DEPENDENCY_SERVICE
            value: openstack:rabbitmq,openstack:mariadb,openstack:keystone-api
          - name: DEPENDENCY_JOBS
            value: nova-db-sync,nova-ks-user,nova-ks-endpoints,nova-rabbit-init
          - name: DEPENDENCY_DAEMONSET
          - name: DEPENDENCY_CONTAINER
          - name: DEPENDENCY_POD_JSON
          - name: DEPENDENCY_CUSTOM_RESOURCE
          image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
          imagePullPolicy: IfNotPresent
          name: init
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        nodeSelector:
          openstack-control-plane: enabled
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsUser: 42424
        serviceAccount: nova-api-osapi
        serviceAccountName: nova-api-osapi
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: pod-tmp
        - emptyDir: {}
          name: pod-var-nova
        - configMap:
            defaultMode: 365
            name: nova-bin
          name: nova-bin
        - name: nova-etc
          secret:
            defaultMode: 292
            secretName: nova-etc
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2020-04-23T03:49:02Z"
      lastUpdateTime: "2020-04-23T03:49:02Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2020-04-23T03:49:02Z"
      lastUpdateTime: "2020-04-23T03:52:58Z"
      message: ReplicaSet "nova-api-osapi-b7b49768d" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 2
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "2"
      openstackhelm.openstack.org/release_uuid: ""
    creationTimestamp: "2020-04-23T03:49:02Z"
    generation: 2
    labels:
      application: nova
      component: conductor
      release_group: nova
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:openstackhelm.openstack.org/release_uuid: {}
          f:labels:
            .: {}
            f:application: {}
            f:component: {}
            f:release_group: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:application: {}
              f:component: {}
              f:release_group: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:configmap-bin-hash: {}
                f:configmap-etc-hash: {}
                f:openstackhelm.openstack.org/release_uuid: {}
              f:labels:
                .: {}
                f:application: {}
                f:component: {}
                f:release_group: {}
            f:spec:
              f:affinity:
                .: {}
                f:podAntiAffinity:
                  .: {}
                  f:preferredDuringSchedulingIgnoredDuringExecution: {}
              f:containers:
                k:{"name":"nova-conductor"}:
                  .: {}
                  f:command: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:exec:
                      .: {}
                      f:command: {}
                    f:failureThreshold: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:readinessProbe:
                    .: {}
                    f:exec:
                      .: {}
                      f:command: {}
                    f:failureThreshold: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/nova/logging.conf"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/nova/nova.conf"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/nova/policy.yaml"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/tmp/health-probe.py"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/tmp/nova-conductor.sh"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
              f:dnsPolicy: {}
              f:initContainers:
                .: {}
                k:{"name":"init"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"DEPENDENCY_CONTAINER"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_CUSTOM_RESOURCE"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_DAEMONSET"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_JOBS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"DEPENDENCY_POD_JSON"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_SERVICE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"INTERFACE_NAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"PATH"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POD_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:nodeSelector:
                .: {}
                f:openstack-control-plane: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:runAsUser: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"nova-bin"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"nova-etc"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:secretName: {}
                k:{"name":"pod-tmp"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
      manager: Go-http-client
      operation: Update
      time: "2020-04-23T03:52:18Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-04-23T04:10:51Z"
    name: nova-conductor
    namespace: openstack
    resourceVersion: "319718"
    selfLink: /apis/apps/v1/namespaces/openstack/deployments/nova-conductor
    uid: fcb97070-28a2-4199-9904-b2adcd3bf71c
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 3
    selector:
      matchLabels:
        application: nova
        component: conductor
        release_group: nova
    strategy:
      rollingUpdate:
        maxSurge: 3
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        annotations:
          configmap-bin-hash: 4facb6815012148878c37059036794ad59f3c90eb803df496507bafcd21ab523
          configmap-etc-hash: 58ff893db30b3873a05a1d110d052c8bf3c6a57b135655afc860df97db65a3b3
          openstackhelm.openstack.org/release_uuid: ""
        creationTimestamp: null
        labels:
          application: nova
          component: conductor
          release_group: nova
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: release_group
                    operator: In
                    values:
                    - nova
                  - key: application
                    operator: In
                    values:
                    - nova
                  - key: component
                    operator: In
                    values:
                    - conductor
                topologyKey: kubernetes.io/hostname
              weight: 10
        containers:
        - command:
          - /tmp/nova-conductor.sh
          image: docker.io/openstackhelm/nova:ocata-ubuntu_xenial
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - python
              - /tmp/health-probe.py
              - --config-file
              - /etc/nova/nova.conf
              - --service-queue-name
              - conductor
              - --liveness-probe
            failureThreshold: 3
            initialDelaySeconds: 120
            periodSeconds: 600
            successThreshold: 1
            timeoutSeconds: 580
          name: nova-conductor
          readinessProbe:
            exec:
              command:
              - python
              - /tmp/health-probe.py
              - --config-file
              - /etc/nova/nova.conf
              - --service-queue-name
              - conductor
            failureThreshold: 3
            initialDelaySeconds: 80
            periodSeconds: 190
            successThreshold: 1
            timeoutSeconds: 185
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: pod-tmp
          - mountPath: /tmp/nova-conductor.sh
            name: nova-bin
            readOnly: true
            subPath: nova-conductor.sh
          - mountPath: /tmp/health-probe.py
            name: nova-bin
            readOnly: true
            subPath: health-probe.py
          - mountPath: /etc/nova/nova.conf
            name: nova-etc
            readOnly: true
            subPath: nova.conf
          - mountPath: /etc/nova/logging.conf
            name: nova-etc
            readOnly: true
            subPath: logging.conf
          - mountPath: /etc/nova/policy.yaml
            name: nova-etc
            readOnly: true
            subPath: policy.yaml
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - kubernetes-entrypoint
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: INTERFACE_NAME
            value: eth0
          - name: PATH
            value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
          - name: DEPENDENCY_SERVICE
            value: openstack:rabbitmq,openstack:mariadb,openstack:keystone-api,openstack:nova-api
          - name: DEPENDENCY_JOBS
            value: nova-db-sync,nova-rabbit-init
          - name: DEPENDENCY_DAEMONSET
          - name: DEPENDENCY_CONTAINER
          - name: DEPENDENCY_POD_JSON
          - name: DEPENDENCY_CUSTOM_RESOURCE
          image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
          imagePullPolicy: IfNotPresent
          name: init
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        nodeSelector:
          openstack-control-plane: enabled
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsUser: 42424
        serviceAccount: nova-conductor
        serviceAccountName: nova-conductor
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: pod-tmp
        - configMap:
            defaultMode: 365
            name: nova-bin
          name: nova-bin
        - name: nova-etc
          secret:
            defaultMode: 292
            secretName: nova-etc
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2020-04-23T03:49:02Z"
      lastUpdateTime: "2020-04-23T03:49:02Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2020-04-23T03:49:02Z"
      lastUpdateTime: "2020-04-23T03:55:01Z"
      message: ReplicaSet "nova-conductor-5776c78d5f" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 2
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "2"
      openstackhelm.openstack.org/release_uuid: ""
    creationTimestamp: "2020-04-23T03:49:02Z"
    generation: 2
    labels:
      application: nova
      component: consoleauth
      release_group: nova
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:openstackhelm.openstack.org/release_uuid: {}
          f:labels:
            .: {}
            f:application: {}
            f:component: {}
            f:release_group: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:application: {}
              f:component: {}
              f:release_group: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:configmap-bin-hash: {}
                f:configmap-etc-hash: {}
                f:openstackhelm.openstack.org/release_uuid: {}
              f:labels:
                .: {}
                f:application: {}
                f:component: {}
                f:release_group: {}
            f:spec:
              f:affinity:
                .: {}
                f:podAntiAffinity:
                  .: {}
                  f:preferredDuringSchedulingIgnoredDuringExecution: {}
              f:containers:
                k:{"name":"nova-consoleauth"}:
                  .: {}
                  f:command: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:exec:
                      .: {}
                      f:command: {}
                    f:failureThreshold: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:readinessProbe:
                    .: {}
                    f:exec:
                      .: {}
                      f:command: {}
                    f:failureThreshold: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/nova/logging.conf"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/nova/nova.conf"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/nova/policy.yaml"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/tmp/health-probe.py"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/tmp/nova-consoleauth.sh"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
              f:dnsPolicy: {}
              f:initContainers:
                .: {}
                k:{"name":"init"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"DEPENDENCY_CONTAINER"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_CUSTOM_RESOURCE"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_DAEMONSET"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_JOBS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"DEPENDENCY_POD_JSON"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_SERVICE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"INTERFACE_NAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"PATH"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POD_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:nodeSelector:
                .: {}
                f:openstack-control-plane: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:runAsUser: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"nova-bin"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"nova-etc"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:secretName: {}
                k:{"name":"pod-tmp"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
      manager: Go-http-client
      operation: Update
      time: "2020-04-23T03:52:18Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-04-23T04:07:53Z"
    name: nova-consoleauth
    namespace: openstack
    resourceVersion: "318710"
    selfLink: /apis/apps/v1/namespaces/openstack/deployments/nova-consoleauth
    uid: e2ed7e3c-2463-47d0-82e1-b2b689a564d0
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 3
    selector:
      matchLabels:
        application: nova
        component: consoleauth
        release_group: nova
    strategy:
      rollingUpdate:
        maxSurge: 3
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        annotations:
          configmap-bin-hash: 4facb6815012148878c37059036794ad59f3c90eb803df496507bafcd21ab523
          configmap-etc-hash: 58ff893db30b3873a05a1d110d052c8bf3c6a57b135655afc860df97db65a3b3
          openstackhelm.openstack.org/release_uuid: ""
        creationTimestamp: null
        labels:
          application: nova
          component: consoleauth
          release_group: nova
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: release_group
                    operator: In
                    values:
                    - nova
                  - key: application
                    operator: In
                    values:
                    - nova
                  - key: component
                    operator: In
                    values:
                    - consoleauth
                topologyKey: kubernetes.io/hostname
              weight: 10
        containers:
        - command:
          - /tmp/nova-consoleauth.sh
          image: docker.io/openstackhelm/nova:ocata-ubuntu_xenial
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - python
              - /tmp/health-probe.py
              - --config-file
              - /etc/nova/nova.conf
              - --service-queue-name
              - consoleauth
              - --liveness-probe
            failureThreshold: 3
            initialDelaySeconds: 120
            periodSeconds: 600
            successThreshold: 1
            timeoutSeconds: 580
          name: nova-consoleauth
          readinessProbe:
            exec:
              command:
              - python
              - /tmp/health-probe.py
              - --config-file
              - /etc/nova/nova.conf
              - --service-queue-name
              - consoleauth
            failureThreshold: 3
            initialDelaySeconds: 80
            periodSeconds: 190
            successThreshold: 1
            timeoutSeconds: 185
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: pod-tmp
          - mountPath: /tmp/nova-consoleauth.sh
            name: nova-bin
            readOnly: true
            subPath: nova-consoleauth.sh
          - mountPath: /tmp/health-probe.py
            name: nova-bin
            readOnly: true
            subPath: health-probe.py
          - mountPath: /etc/nova/nova.conf
            name: nova-etc
            readOnly: true
            subPath: nova.conf
          - mountPath: /etc/nova/logging.conf
            name: nova-etc
            readOnly: true
            subPath: logging.conf
          - mountPath: /etc/nova/policy.yaml
            name: nova-etc
            readOnly: true
            subPath: policy.yaml
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - kubernetes-entrypoint
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: INTERFACE_NAME
            value: eth0
          - name: PATH
            value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
          - name: DEPENDENCY_SERVICE
            value: openstack:rabbitmq,openstack:mariadb,openstack:keystone-api,openstack:nova-api
          - name: DEPENDENCY_JOBS
            value: nova-db-sync,nova-rabbit-init
          - name: DEPENDENCY_DAEMONSET
          - name: DEPENDENCY_CONTAINER
          - name: DEPENDENCY_POD_JSON
          - name: DEPENDENCY_CUSTOM_RESOURCE
          image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
          imagePullPolicy: IfNotPresent
          name: init
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        nodeSelector:
          openstack-control-plane: enabled
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsUser: 42424
        serviceAccount: nova-consoleauth
        serviceAccountName: nova-consoleauth
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: pod-tmp
        - configMap:
            defaultMode: 365
            name: nova-bin
          name: nova-bin
        - name: nova-etc
          secret:
            defaultMode: 292
            secretName: nova-etc
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2020-04-23T03:49:02Z"
      lastUpdateTime: "2020-04-23T03:49:02Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2020-04-23T03:49:02Z"
      lastUpdateTime: "2020-04-23T03:55:12Z"
      message: ReplicaSet "nova-consoleauth-765fb795bc" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 2
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "2"
      openstackhelm.openstack.org/release_uuid: ""
    creationTimestamp: "2020-04-23T03:49:02Z"
    generation: 2
    labels:
      application: nova
      component: novnc-proxy
      release_group: nova
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:openstackhelm.openstack.org/release_uuid: {}
          f:labels:
            .: {}
            f:application: {}
            f:component: {}
            f:release_group: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:application: {}
              f:component: {}
              f:release_group: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:configmap-bin-hash: {}
                f:configmap-etc-hash: {}
                f:openstackhelm.openstack.org/release_uuid: {}
              f:labels:
                .: {}
                f:application: {}
                f:component: {}
                f:release_group: {}
            f:spec:
              f:affinity:
                .: {}
                f:podAntiAffinity:
                  .: {}
                  f:preferredDuringSchedulingIgnoredDuringExecution: {}
              f:containers:
                k:{"name":"nova-novncproxy"}:
                  .: {}
                  f:command: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:tcpSocket:
                      .: {}
                      f:port: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":6080,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:hostPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:tcpSocket:
                      .: {}
                      f:port: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/nova/logging.conf"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/nova/nova.conf"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/tmp/nova-console-proxy.sh"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/tmp/pod-shared"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/usr/share/novnc"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
              f:dnsPolicy: {}
              f:hostNetwork: {}
              f:initContainers:
                .: {}
                k:{"name":"init"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"DEPENDENCY_CONTAINER"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_CUSTOM_RESOURCE"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_DAEMONSET"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_JOBS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"DEPENDENCY_POD_JSON"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_SERVICE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"INTERFACE_NAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"PATH"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POD_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                k:{"name":"nova-novncproxy-init"}:
                  .: {}
                  f:command: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/nova/logging.conf"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/nova/nova.conf"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/tmp/nova-console-proxy-init.sh"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/tmp/pod-shared"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                k:{"name":"nova-novncproxy-init-assets"}:
                  .: {}
                  f:command: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/tmp/nova-console-proxy-init-assets.sh"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/tmp/usr/share/novnc"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:nodeSelector:
                .: {}
                f:openstack-control-plane: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:runAsUser: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"nova-bin"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"nova-etc"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:secretName: {}
                k:{"name":"pod-shared"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
                k:{"name":"pod-tmp"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
                k:{"name":"pod-usr-share-novnc"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
      manager: Go-http-client
      operation: Update
      time: "2020-04-23T03:52:18Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-04-23T04:08:26Z"
    name: nova-novncproxy
    namespace: openstack
    resourceVersion: "318938"
    selfLink: /apis/apps/v1/namespaces/openstack/deployments/nova-novncproxy
    uid: 87ea43b5-2e78-4abe-aff1-3704a215f4dc
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 3
    selector:
      matchLabels:
        application: nova
        component: novnc-proxy
        release_group: nova
    strategy:
      rollingUpdate:
        maxSurge: 3
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        annotations:
          configmap-bin-hash: 4facb6815012148878c37059036794ad59f3c90eb803df496507bafcd21ab523
          configmap-etc-hash: 58ff893db30b3873a05a1d110d052c8bf3c6a57b135655afc860df97db65a3b3
          openstackhelm.openstack.org/release_uuid: ""
        creationTimestamp: null
        labels:
          application: nova
          component: novnc-proxy
          release_group: nova
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: release_group
                    operator: In
                    values:
                    - nova
                  - key: application
                    operator: In
                    values:
                    - nova
                  - key: component
                    operator: In
                    values:
                    - novnc-proxy
                topologyKey: kubernetes.io/hostname
              weight: 10
        containers:
        - command:
          - /tmp/nova-console-proxy.sh
          image: docker.io/openstackhelm/nova:ocata-ubuntu_xenial
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 6080
            timeoutSeconds: 1
          name: nova-novncproxy
          ports:
          - containerPort: 6080
            hostPort: 6080
            name: n-novnc
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 6080
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: pod-tmp
          - mountPath: /tmp/nova-console-proxy.sh
            name: nova-bin
            readOnly: true
            subPath: nova-console-proxy.sh
          - mountPath: /etc/nova/nova.conf
            name: nova-etc
            readOnly: true
            subPath: nova.conf
          - mountPath: /etc/nova/logging.conf
            name: nova-etc
            readOnly: true
            subPath: logging.conf
          - mountPath: /usr/share/novnc
            name: pod-usr-share-novnc
            readOnly: true
          - mountPath: /tmp/pod-shared
            name: pod-shared
        dnsPolicy: ClusterFirstWithHostNet
        hostNetwork: true
        initContainers:
        - command:
          - kubernetes-entrypoint
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: INTERFACE_NAME
            value: eth0
          - name: PATH
            value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
          - name: DEPENDENCY_SERVICE
            value: openstack:mariadb
          - name: DEPENDENCY_JOBS
            value: nova-db-sync
          - name: DEPENDENCY_DAEMONSET
          - name: DEPENDENCY_CONTAINER
          - name: DEPENDENCY_POD_JSON
          - name: DEPENDENCY_CUSTOM_RESOURCE
          image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
          imagePullPolicy: IfNotPresent
          name: init
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - /tmp/nova-console-proxy-init.sh
          image: docker.io/openstackhelm/nova:ocata-ubuntu_xenial
          imagePullPolicy: IfNotPresent
          name: nova-novncproxy-init
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: pod-tmp
          - mountPath: /tmp/nova-console-proxy-init.sh
            name: nova-bin
            readOnly: true
            subPath: nova-console-proxy-init.sh
          - mountPath: /etc/nova/nova.conf
            name: nova-etc
            readOnly: true
            subPath: nova.conf
          - mountPath: /etc/nova/logging.conf
            name: nova-etc
            readOnly: true
            subPath: logging.conf
          - mountPath: /tmp/pod-shared
            name: pod-shared
        - command:
          - /tmp/nova-console-proxy-init-assets.sh
          image: docker.io/openstackhelm/nova:ocata-ubuntu_xenial
          imagePullPolicy: IfNotPresent
          name: nova-novncproxy-init-assets
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: pod-tmp
          - mountPath: /tmp/nova-console-proxy-init-assets.sh
            name: nova-bin
            readOnly: true
            subPath: nova-console-proxy-init-assets.sh
          - mountPath: /tmp/usr/share/novnc
            name: pod-usr-share-novnc
        nodeSelector:
          openstack-control-plane: enabled
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsUser: 42424
        serviceAccount: nova-novncproxy
        serviceAccountName: nova-novncproxy
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: pod-tmp
        - configMap:
            defaultMode: 365
            name: nova-bin
          name: nova-bin
        - name: nova-etc
          secret:
            defaultMode: 292
            secretName: nova-etc
        - emptyDir: {}
          name: pod-usr-share-novnc
        - emptyDir: {}
          name: pod-shared
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2020-04-23T03:49:03Z"
      lastUpdateTime: "2020-04-23T03:49:03Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2020-04-23T03:49:02Z"
      lastUpdateTime: "2020-04-23T03:53:01Z"
      message: ReplicaSet "nova-novncproxy-76dfb8c489" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 2
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "2"
      openstackhelm.openstack.org/release_uuid: ""
    creationTimestamp: "2020-04-23T03:49:02Z"
    generation: 2
    labels:
      application: nova
      component: placement
      release_group: nova
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:openstackhelm.openstack.org/release_uuid: {}
          f:labels:
            .: {}
            f:application: {}
            f:component: {}
            f:release_group: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:application: {}
              f:component: {}
              f:release_group: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:configmap-bin-hash: {}
                f:configmap-etc-hash: {}
                f:openstackhelm.openstack.org/release_uuid: {}
              f:labels:
                .: {}
                f:application: {}
                f:component: {}
                f:release_group: {}
            f:spec:
              f:affinity:
                .: {}
                f:podAntiAffinity:
                  .: {}
                  f:preferredDuringSchedulingIgnoredDuringExecution: {}
              f:containers:
                k:{"name":"nova-placement-api"}:
                  .: {}
                  f:command: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:lifecycle:
                    .: {}
                    f:preStop:
                      .: {}
                      f:exec:
                        .: {}
                        f:command: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:tcpSocket:
                      .: {}
                      f:port: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8778,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:tcpSocket:
                      .: {}
                      f:port: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/apache2/conf-enabled/security.conf"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/apache2/conf-enabled/wsgi-nova-placement.conf"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/nova/api-paste.ini"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/nova/logging.conf"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/nova/nova.conf"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/nova/policy.yaml"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/tmp/nova-placement-api.sh"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/var/www/cgi-bin/nova"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:initContainers:
                .: {}
                k:{"name":"init"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"DEPENDENCY_CONTAINER"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_CUSTOM_RESOURCE"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_DAEMONSET"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_JOBS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"DEPENDENCY_POD_JSON"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_SERVICE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"INTERFACE_NAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"PATH"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POD_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:nodeSelector:
                .: {}
                f:openstack-control-plane: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"nova-bin"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"nova-etc"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:secretName: {}
                k:{"name":"pod-tmp"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
                k:{"name":"wsgi-nova"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
      manager: Go-http-client
      operation: Update
      time: "2020-04-23T03:52:18Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-04-23T04:06:31Z"
    name: nova-placement-api
    namespace: openstack
    resourceVersion: "317806"
    selfLink: /apis/apps/v1/namespaces/openstack/deployments/nova-placement-api
    uid: 201d9ebd-b431-47f7-b4fe-1ebdcab9a427
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 3
    selector:
      matchLabels:
        application: nova
        component: placement
        release_group: nova
    strategy:
      rollingUpdate:
        maxSurge: 3
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        annotations:
          configmap-bin-hash: 4facb6815012148878c37059036794ad59f3c90eb803df496507bafcd21ab523
          configmap-etc-hash: 58ff893db30b3873a05a1d110d052c8bf3c6a57b135655afc860df97db65a3b3
          openstackhelm.openstack.org/release_uuid: ""
        creationTimestamp: null
        labels:
          application: nova
          component: placement
          release_group: nova
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: release_group
                    operator: In
                    values:
                    - nova
                  - key: application
                    operator: In
                    values:
                    - nova
                  - key: component
                    operator: In
                    values:
                    - placement
                topologyKey: kubernetes.io/hostname
              weight: 10
        containers:
        - command:
          - /tmp/nova-placement-api.sh
          - start
          image: docker.io/openstackhelm/nova:ocata-ubuntu_xenial
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /tmp/nova-placement-api.sh
                - stop
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 50
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 8778
            timeoutSeconds: 1
          name: nova-placement-api
          ports:
          - containerPort: 8778
            name: p-api
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 8778
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: pod-tmp
          - mountPath: /var/www/cgi-bin/nova
            name: wsgi-nova
          - mountPath: /tmp/nova-placement-api.sh
            name: nova-bin
            readOnly: true
            subPath: nova-placement-api.sh
          - mountPath: /etc/nova/nova.conf
            name: nova-etc
            readOnly: true
            subPath: nova.conf
          - mountPath: /etc/nova/logging.conf
            name: nova-etc
            readOnly: true
            subPath: logging.conf
          - mountPath: /etc/nova/api-paste.ini
            name: nova-etc
            readOnly: true
            subPath: api-paste.ini
          - mountPath: /etc/nova/policy.yaml
            name: nova-etc
            readOnly: true
            subPath: policy.yaml
          - mountPath: /etc/apache2/conf-enabled/wsgi-nova-placement.conf
            name: nova-etc
            readOnly: true
            subPath: wsgi-nova-placement.conf
          - mountPath: /etc/apache2/conf-enabled/security.conf
            name: nova-etc
            readOnly: true
            subPath: security.conf
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - kubernetes-entrypoint
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: INTERFACE_NAME
            value: eth0
          - name: PATH
            value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
          - name: DEPENDENCY_SERVICE
            value: openstack:rabbitmq,openstack:mariadb,openstack:keystone-api
          - name: DEPENDENCY_JOBS
            value: nova-db-sync,nova-ks-user,nova-ks-endpoints,nova-rabbit-init
          - name: DEPENDENCY_DAEMONSET
          - name: DEPENDENCY_CONTAINER
          - name: DEPENDENCY_POD_JSON
          - name: DEPENDENCY_CUSTOM_RESOURCE
          image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
          imagePullPolicy: IfNotPresent
          name: init
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        nodeSelector:
          openstack-control-plane: enabled
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: nova-placement-api
        serviceAccountName: nova-placement-api
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: pod-tmp
        - emptyDir: {}
          name: wsgi-nova
        - configMap:
            defaultMode: 365
            name: nova-bin
          name: nova-bin
        - name: nova-etc
          secret:
            defaultMode: 292
            secretName: nova-etc
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2020-04-23T03:49:03Z"
      lastUpdateTime: "2020-04-23T03:49:03Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2020-04-23T03:49:02Z"
      lastUpdateTime: "2020-04-23T03:52:40Z"
      message: ReplicaSet "nova-placement-api-6c88b9d7f" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 2
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "2"
      openstackhelm.openstack.org/release_uuid: ""
    creationTimestamp: "2020-04-23T03:49:02Z"
    generation: 2
    labels:
      application: nova
      component: scheduler
      release_group: nova
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:openstackhelm.openstack.org/release_uuid: {}
          f:labels:
            .: {}
            f:application: {}
            f:component: {}
            f:release_group: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:application: {}
              f:component: {}
              f:release_group: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:configmap-bin-hash: {}
                f:configmap-etc-hash: {}
                f:openstackhelm.openstack.org/release_uuid: {}
              f:labels:
                .: {}
                f:application: {}
                f:component: {}
                f:release_group: {}
            f:spec:
              f:affinity:
                .: {}
                f:podAntiAffinity:
                  .: {}
                  f:preferredDuringSchedulingIgnoredDuringExecution: {}
              f:containers:
                k:{"name":"nova-scheduler"}:
                  .: {}
                  f:command: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:exec:
                      .: {}
                      f:command: {}
                    f:failureThreshold: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:readinessProbe:
                    .: {}
                    f:exec:
                      .: {}
                      f:command: {}
                    f:failureThreshold: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/nova/logging.conf"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/nova/nova.conf"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/nova/policy.yaml"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/tmp/health-probe.py"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/tmp/nova-scheduler.sh"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
              f:dnsPolicy: {}
              f:initContainers:
                .: {}
                k:{"name":"init"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"DEPENDENCY_CONTAINER"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_CUSTOM_RESOURCE"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_DAEMONSET"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_JOBS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"DEPENDENCY_POD_JSON"}:
                      .: {}
                      f:name: {}
                    k:{"name":"DEPENDENCY_SERVICE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"INTERFACE_NAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"PATH"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POD_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:nodeSelector:
                .: {}
                f:openstack-control-plane: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:runAsUser: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"nova-bin"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"nova-etc"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:secretName: {}
                k:{"name":"pod-tmp"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
      manager: Go-http-client
      operation: Update
      time: "2020-04-23T03:52:18Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-04-23T04:09:38Z"
    name: nova-scheduler
    namespace: openstack
    resourceVersion: "319388"
    selfLink: /apis/apps/v1/namespaces/openstack/deployments/nova-scheduler
    uid: 7cf2739a-e466-41ba-9fca-30741523fd07
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 3
    selector:
      matchLabels:
        application: nova
        component: scheduler
        release_group: nova
    strategy:
      rollingUpdate:
        maxSurge: 3
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        annotations:
          configmap-bin-hash: 4facb6815012148878c37059036794ad59f3c90eb803df496507bafcd21ab523
          configmap-etc-hash: 58ff893db30b3873a05a1d110d052c8bf3c6a57b135655afc860df97db65a3b3
          openstackhelm.openstack.org/release_uuid: ""
        creationTimestamp: null
        labels:
          application: nova
          component: scheduler
          release_group: nova
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: release_group
                    operator: In
                    values:
                    - nova
                  - key: application
                    operator: In
                    values:
                    - nova
                  - key: component
                    operator: In
                    values:
                    - scheduler
                topologyKey: kubernetes.io/hostname
              weight: 10
        containers:
        - command:
          - /tmp/nova-scheduler.sh
          image: docker.io/openstackhelm/nova:ocata-ubuntu_xenial
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - python
              - /tmp/health-probe.py
              - --config-file
              - /etc/nova/nova.conf
              - --service-queue-name
              - scheduler
              - --liveness-probe
            failureThreshold: 3
            initialDelaySeconds: 120
            periodSeconds: 600
            successThreshold: 1
            timeoutSeconds: 580
          name: nova-scheduler
          readinessProbe:
            exec:
              command:
              - python
              - /tmp/health-probe.py
              - --config-file
              - /etc/nova/nova.conf
              - --service-queue-name
              - scheduler
            failureThreshold: 3
            initialDelaySeconds: 80
            periodSeconds: 190
            successThreshold: 1
            timeoutSeconds: 185
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: pod-tmp
          - mountPath: /tmp/nova-scheduler.sh
            name: nova-bin
            readOnly: true
            subPath: nova-scheduler.sh
          - mountPath: /tmp/health-probe.py
            name: nova-bin
            readOnly: true
            subPath: health-probe.py
          - mountPath: /etc/nova/nova.conf
            name: nova-etc
            readOnly: true
            subPath: nova.conf
          - mountPath: /etc/nova/logging.conf
            name: nova-etc
            readOnly: true
            subPath: logging.conf
          - mountPath: /etc/nova/policy.yaml
            name: nova-etc
            readOnly: true
            subPath: policy.yaml
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - kubernetes-entrypoint
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: INTERFACE_NAME
            value: eth0
          - name: PATH
            value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/
          - name: DEPENDENCY_SERVICE
            value: openstack:rabbitmq,openstack:mariadb,openstack:keystone-api,openstack:nova-api
          - name: DEPENDENCY_JOBS
            value: nova-db-sync,nova-rabbit-init
          - name: DEPENDENCY_DAEMONSET
          - name: DEPENDENCY_CONTAINER
          - name: DEPENDENCY_POD_JSON
          - name: DEPENDENCY_CUSTOM_RESOURCE
          image: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
          imagePullPolicy: IfNotPresent
          name: init
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 65534
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        nodeSelector:
          openstack-control-plane: enabled
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsUser: 42424
        serviceAccount: nova-scheduler
        serviceAccountName: nova-scheduler
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: pod-tmp
        - configMap:
            defaultMode: 365
            name: nova-bin
          name: nova-bin
        - name: nova-etc
          secret:
            defaultMode: 292
            secretName: nova-etc
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2020-04-23T03:49:03Z"
      lastUpdateTime: "2020-04-23T03:49:03Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2020-04-23T04:09:38Z"
      lastUpdateTime: "2020-04-23T04:09:38Z"
      message: ReplicaSet "nova-scheduler-77f7749df9" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 2
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
kind: List
metadata:
  resourceVersion: ""
  selfLink: ""
